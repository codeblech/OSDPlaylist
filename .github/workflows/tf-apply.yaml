# name: Update playlist with Spotify Auth
# on:
#   push:
#     branches:
#       - main
# jobs:
#   spotify-auth-and-apply:
#     runs-on: ubuntu-latest
#     name: Apply
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Go
#         uses: actions/setup-go@v5
#         with:
#           go-version: '1.18.0'

#       - name: Install spotify_auth_proxy
#         run: go install github.com/conradludgate/terraform-provider-spotify/spotify_auth_proxy@latest

#       - name: Run spotify_auth_proxy and capture Auth URL
#         env:
#           SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
#           SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
#           SPOTIFY_CLIENT_REDIRECT_URI: ${{ secrets.SPOTIFY_CLIENT_REDIRECT_URI }}
#         run: |
#           spotify_auth_proxy > proxy_output.log 2>&1 &
#           PROXY_PID=$!
#           echo "PROXY_PID=$PROXY_PID" >> $GITHUB_ENV

#           # Wait for the Auth URL and API Key to appear in the log
#           while ! (grep -q "Auth URL:" proxy_output.log && grep -q "APIKey:" proxy_output.log); do
#             sleep 1
#           done

#           auth_url=$(grep "Auth URL:" proxy_output.log | awk '{print $3}')
#           api_key=$(grep "APIKey:" proxy_output.log | awk '{print $2}')
#           echo "AUTH_URL=$auth_url" >> $GITHUB_ENV
#           echo "SPOTIFY_API_KEY=$api_key" >> $GITHUB_ENV


#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'

#       - name: Install Puppeteer
#         run: npm install puppeteer

#       - name: Perform Spotify login
#         env:
#           SPOTIFY_USERNAME: ${{ secrets.SPOTIFY_USERNAME }}
#           SPOTIFY_PASSWORD: ${{ secrets.SPOTIFY_PASSWORD }}
#         run: |
#           node - <<EOF
#           const puppeteer = require('puppeteer');

#           (async () => {
#             const browser = await puppeteer.launch({ headless: true });
#             const page = await browser.newPage();

#             try {
#               await page.goto('${{ env.AUTH_URL }}');

#               // Wait for login form and fill in credentials
#               await page.waitForSelector('#login-username');
#               await page.type('#login-username', process.env.SPOTIFY_USERNAME);
#               await page.type('#login-password', process.env.SPOTIFY_PASSWORD);

#               // Submit the form
#               await page.click('#login-button');

#               // Wait for redirect and authorization
#               await page.waitForNavigation({ waitUntil: 'networkidle0' });

#               // Check for successful authorization
#               const content = await page.content();
#               if (content.includes('Authorization successful')) {
#                 console.log('Spotify authorization successful');
#               } else {
#                 throw new Error('Authorization not successful');
#               }
#             } catch (error) {
#               console.error('Error during Spotify login:', error);
#               process.exit(1);
#             } finally {
#               await browser.close();
#             }
#           })();
#           EOF
#       - name: Run Terraform Apply
#         run: |
#           terraform init
#           terraform apply -var="SPOTIFY_API_KEY=${{ env.SPOTIFY_API_KEY }}" -auto-approve

name: Update playlist with Spotify Auth

on:
  push:
    branches:
      - main

jobs:
  spotify-auth-and-apply:
    runs-on: ubuntu-latest
    name: Apply
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install axios

      - name: Perform Spotify OAuth
        env:
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          SPOTIFY_REFRESH_TOKEN: ${{ secrets.SPOTIFY_REFRESH_TOKEN }}
        id: spotify_auth
        run: |
          node - <<EOF
          const axios = require('axios');
          const qs = require('querystring');

          (async () => {
            try {
              // Check if all required environment variables are set
              const requiredEnvVars = ['SPOTIFY_CLIENT_ID', 'SPOTIFY_CLIENT_SECRET', 'SPOTIFY_REFRESH_TOKEN'];
              const missingEnvVars = requiredEnvVars.filter(varName => !process.env[varName]);
              
              if (missingEnvVars.length > 0) {
                throw new Error(`Missing required environment variables: ${missingEnvVars.join(', ')}`);
              }

              console.log('All required environment variables are set.');
              
              // Debug: Log the first few characters of the refresh token
              console.log('First 5 characters of SPOTIFY_REFRESH_TOKEN:', process.env.SPOTIFY_REFRESH_TOKEN.substring(0, 5));

              const response = await axios.post('https://accounts.spotify.com/api/token', 
                qs.stringify({
                  grant_type: 'refresh_token',
                  refresh_token: process.env.SPOTIFY_REFRESH_TOKEN,
                  client_id: process.env.SPOTIFY_CLIENT_ID,
                  client_secret: process.env.SPOTIFY_CLIENT_SECRET
                }), {
                  headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                  }
                }
              );

              console.log('Spotify authentication successful');
              // Use GitHub Actions set-output command to save the access token
              console.log(`::set-output name=SPOTIFY_ACCESS_TOKEN::${response.data.access_token}`);
            } catch (error) {
              console.error('Error during Spotify authentication:', error.message);
              if (error.response) {
                console.error('Response data:', JSON.stringify(error.response.data, null, 2));
                console.error('Response status:', error.response.status);
                console.error('Response headers:', JSON.stringify(error.response.headers, null, 2));
              } else if (error.request) {
                console.error('No response received. Request:', JSON.stringify(error.request, null, 2));
              }
              process.exit(1);
            }
          })();
          EOF

      - name: Run Terraform Apply
        if: success()
        env:
          SPOTIFY_ACCESS_TOKEN: ${{ steps.spotify_auth.outputs.SPOTIFY_ACCESS_TOKEN }}
        run: |
          if [ -z "$SPOTIFY_ACCESS_TOKEN" ]; then
            echo "SPOTIFY_ACCESS_TOKEN is not set. Spotify authentication may have failed."
            exit 1
          fi
          echo "Access token is set and not empty."
          terraform init
          terraform apply -var="spotify_token=$SPOTIFY_ACCESS_TOKEN" -auto-approve
